* PyQt 学习笔记
** Org-mode 的学习

*bold*
/italic/
_underlined_
~verbatim~
+strike-through+
=print=

#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(+ 1 2 3 4)
#+END_SRC

#+RESULTS:
: 10

#+begin_src python :results output
print("Hello, World")
#+end_src

#+RESULTS:
: Hello, World

** PyQt5 的主要模块

PyQt5类分为很多模块，主要模块有：

   * QtCore 包含了核心的非GUI的功能。主要和时间、文件与文件夹、各种数据、流、URLs、mime类文件、进程与线程一起使用。
   * QtGui 包含了窗口系统、事件处理、2D图像、基本绘画、字体和文字类。
   * QtWidgets
   * QtMultimedia
   * QtBluetooth
   * QtNetwork
   * QtPositioning
   * Enginio
   * QtWebSockets
   * QtWebKit
   * QtWebKitWidgets
   * QtXml
   * QtSvg
   * QtSql
   * QtTest

QtWidgets 类包含了一系列创建桌面应用的UI元素，是较为常用的类，按钮，菜单，小部件都由 QtWidgets 提供。

** HelloWorld：一个简单的窗口

#+BEGIN_SRC python :results output
  import sys
  from PyQt5.QtWidgets import QApplication, QWidget

  if __name__ == "__main__":

      app = QApplication(sys.argv)

      w = QWidget()
      w.resize(250, 150)
      w.move(300, 300)
      w.setWindowTitle("Hello World")
      w.show()

      sys.exit(app.exec_())
#+END_SRC

上面的代码，能展示出一个小窗口。

#+BEGIN_SRC python :results output
  import sys
  from PyQt5.QtWidgets import Qapplication, QWidget
#+END_SRC

这里引入了PyQt5.QtWidgets模块，这个模块包含了基本的组件。

nn#+begin_src python
  app = QApplication(sys.argv)
#+end_src

每个PyQt5应用都必须创建一个应用对象。sys.argv是一组命令行参数的列表。Python可以在shell里面运行，这个参数提供对脚本控制的功能

*每创建一个PyQt5应用，就必须要写这个，sys.argv提供对python代码的控制功能*

#+begin_src python
  w = QWidget()
#+end_src

QWidget控件是一个用户界面的基本控件，它提供了基本的应用构造器。默认情况下，构造器是没有父级的，没有父级的构造器被称为窗口（window）。

resize方法可以用来修改窗口的大小， =resize(250, 150)= ，第一个参数是窗口的宽，第二个参数是窗口的长， =move= 用于修改窗口的位置，接收一个坐标。 =setWindowTitle()= 用来修改窗口的标题， =show= 让窗口在桌面上显示出来。

最后，我们进入了应用的主循环中，事件处理器这个时候开始工作。主循环从窗口上接收事件，并把事件派发到应用控件里。当调用 =exit()= 方法或直接销毁主控件时，主循环就会结束。 =sys.exit()= 方法能确保主循环安全退出。外部环境会收到主控件如何结束的信息。

